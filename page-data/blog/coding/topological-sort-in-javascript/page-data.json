{"componentChunkName":"component---src-templates-page-js","path":"/blog/coding/topological-sort-in-javascript/","result":{"data":{"page":{"name":"Topological Sort in Javascript","menu":null,"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Topological sorting is an important algorithmic technique used in graph theory to sort vertices in a directed acyclic graph (DAG). It provides an ordering of vertices such that for every directed edge (u,v), vertex u comes before vertex v in the ordering. This ordering is known as a topological order or topological sort."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Real World Applications"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Topological sorting has numerous real-world applications. For instance, it can be used in scheduling problems where tasks have dependencies that must be completed before they can be executed. Another example is in the dependency management of software packages, where libraries and dependencies must be installed in the correct order to ensure that the system is properly configured."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Algorithmic Approach"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The topological sort algorithm follows a simple approach. It starts by selecting any vertex in the DAG with no incoming edges and adds it to the topological ordering. Then it removes the vertex from the graph along with all its outgoing edges. This process is repeated until all vertices have been added to the ordering."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There can be multiple topological orders for a given DAG. Therefore, the topological sort algorithm may produce different orderings depending on the order in which vertices are selected."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Example"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\n\nA -> B -> C -> E\n\n\n |              ^\n\n\n v             |\n\n\nD -----------\n\n\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A topological ordering for this graph is: A, D, B, C, E."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, vertex A is selected as it has no incoming edges. It is added to the topological ordering and removed from the graph along with its outgoing edge to vertex B. Vertex D is the only vertex with no incoming edges and is added to the queue. Dequeuing D adds it to the topological ordering and removes its outgoing edge to vertex B. Vertex B now has no incoming edges and is added to the queue. Dequeuing B adds it to the topological ordering and removes its outgoing edge to vertex C. Vertex C now has no incoming edges and is added to the queue. Dequeuing C adds it to the topological ordering and removes its outgoing edge to vertex E. Finally, vertex E is dequeued, added to the topological ordering, and the algorithm terminates."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Implementation Details"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hereâ€™s an outline of the basic steps involved in topological sorting."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Create a list to hold the topological ordering."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Identify all vertices in the DAG with no incoming edges and add them to a queue."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"While the queue is not empty:\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Dequeue a vertex u from the queue and add it to the topological ordering."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"For each vertex v that u is connected to via a directed edge:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Remove the edge (u,v) from the graph."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If v has no incoming edges, add it to the queue."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If all vertices have been added to the topological ordering, return the list. Otherwise, the graph contains a cycle and no topological ordering exists."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\n\nfunction topologicalSort(graph) {\n\n\n  const inDegree = new Map(); // Map to keep track of incoming edges for each vertex\n\n\n  const queue = []; // Queue to hold vertices with no incoming edges\n\n\n  const result = []; // Array to hold the topological order\n\n\n  for (const vertex of graph) {\n\n\n    inDegree.set(vertex, 0);\n\n\n  }\n\n\n  for (const [from, to] of graph) {\n\n\n    inDegree.set(to, inDegree.get(to) + 1);\n\n\n  }\n\n\n  for (const [vertex, degree] of inDegree.entries()) {\n\n\n    if (degree === 0) {\n\n\n      queue.push(vertex);\n\n\n    }\n\n\n  }\n\n\n  while (queue.length > 0) {\n\n\n    const current = queue.shift();\n\n\n    result.push(current);\n\n\n    for (const [from, to] of graph) {\n\n\n      if (from === current) {\n\n\n        inDegree.set(to, inDegree.get(to) - 1);\n\n\n        if (inDegree.get(to) === 0) {\n\n\n          queue.push(to);\n\n\n        }\n\n\n      }\n\n\n    }\n\n\n  }\n\n\n  if (result.length !== inDegree.size) {\n\n\n    throw new Error('Graph contains a cycle');\n\n\n  }\n\n\n  return result;\n\n\n}\n\n\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Topological sorting is an efficient algorithm that provides a linear ordering of vertices in a directed acyclic graph. It has numerous real-world applications and is a fundamental concept in graph theory. The algorithm is simple to understand and implement, and its time complexity is O(V+E) where V is the number of vertices and E is the number of edges in the graph."}]}],"data":{"quirksMode":false}}},"description":null,"affiliate":true,"modifiedTime":"2023-03-20T01:09:42.254Z","cover":null,"showTitle":true}},"pageContext":{"index":false,"page":true,"slug":"/blog/coding/topological-sort-in-javascript","id":"/blog/coding/topological-sort-in-javascript"}},"staticQueryHashes":["2515861143"],"slicesMap":{}}