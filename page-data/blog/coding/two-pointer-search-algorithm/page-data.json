{"componentChunkName":"component---src-templates-page-js","path":"/blog/coding/two-pointer-search-algorithm/","result":{"data":{"page":{"name":"Two Pointer Search Algorithm","menu":null,"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What is the 2 pointer algorithm?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The 2 pointer algorithm is a widely used technique in computer science and programming that is particularly effective for solving problems related to arrays, linked lists, and other data structures that involve searching for pairs of elements. In this blog post, we will explore the 2 pointer algorithm and how it can be applied to solve various programming challenges."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"How does the 2 pointer algorithm work?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The 2 pointer algorithm works by using two pointers to traverse an array or other data structure simultaneously. The pointers start at opposite ends of the array and move towards each other, either one step at a time or in larger increments depending on the problem being solved. The algorithm continues until the two pointers meet, or until a certain condition is met."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's an example to illustrate the 2 pointer algorithm in action:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Suppose we have an array of integers and we want to find a pair of numbers that sum up to a certain target value. We can use the 2 pointer algorithm to solve this problem. We start by initializing two pointers, one at the beginning of the array and one at the end of the array. We then check the sum of the two numbers pointed to by the two pointers. If the sum is equal to the target value, we have found our pair of numbers. If the sum is less than the target value, we move the left pointer to the right by one position. If the sum is greater than the target value, we move the right pointer to the left by one position. We repeat this process until we find a pair of numbers that sum up to the target value, or until the two pointers meet."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Example"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Suppose we have a sorted array of integers and we want to find a pair of numbers whose sum is equal to a given target value. We can use the two-pointer algorithm to solve this problem efficiently in O(n) time complexity."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\n\nfunction findPair(nums, target) {\n\n\n  let left = 0;\n\n\n  let right = nums.length - 1;\n\n\n  while (left < right) {\n\n\n    const sum = nums[left] + nums[right];\n\n\n    if (sum === target) {\n\n\n      return [nums[left], nums[right]]; // Found a pair\n\n\n    } else if (sum < target) {\n\n\n      left++; // Move left pointer to the right\n\n\n    } else {\n\n\n      right--; // Move right pointer to the left\n\n\n    }\n\n\n  }\n\n\n  return null;\n\n\n}\n\n\n// Example usage\n\n\nconst nums = [3, 5, 2, -4, 8, 11];\n\n\nconst target = 7;\n\n\nconst pair = findPair(nums, target);\n\n\nconsole.log(pair); // Output: [2, 5]\n\n\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this example, we initialize two pointers at the beginning and end of the array. We then loop until the pointers meet, checking the sum of the values at the pointers. If the sum is equal to the target, we return the pair of values. If the sum is less than the target, we move the left pointer to the right to increase the sum, and if the sum is greater than the target, we move the right pointer to the left to decrease the sum. If no pair is found, we return null."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Applications of the 2 pointer algorithm"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The 2 pointer algorithm can be applied to solve a wide range of programming problems, including:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Finding pairs of numbers that sum up to a certain target value in an array."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Checking whether an array is sorted or not."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Finding the intersection of two sorted arrays."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Removing duplicates from a sorted array."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Finding the maximum subarray sum in an array."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Detecting a cycle in a linked list."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Finding the middle element of a linked list."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Advantages of the 2 pointer algorithm"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The 2 pointer algorithm has several advantages over other algorithms. First, it has a time complexity of O(n), which makes it very efficient for solving large problems. Second, it is easy to implement and understand, which makes it a popular choice for solving programming challenges. Finally, the 2 pointer algorithm can be adapted to solve a wide range of problems, which makes it a versatile tool for programmers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The 2 pointer algorithm is a powerful technique that is widely used in computer science and programming. It is particularly effective for solving problems related to arrays, linked lists, and other data structures that involve searching for pairs of elements. The algorithm works by using two pointers to traverse the data structure from both ends simultaneously, until they meet in the middle or until a certain condition is met. The 2 pointer algorithm has several advantages over other algorithms, including a time complexity of O(n), ease of implementation, and versatility."}]}],"data":{"quirksMode":false}}},"description":null,"affiliate":true,"modifiedTime":"2023-03-21T19:50:37.629Z","cover":null,"showTitle":true},"allGooglePhotosPhoto":{"nodes":[]}},"pageContext":{"index":false,"page":true,"name":"Two Pointer Search Algorithm","slug":"/blog/coding/two-pointer-search-algorithm","id":"/blog/coding/two-pointer-search-algorithm","albumTitle":"Two Pointer Search Algorithm"}},"staticQueryHashes":["2515861143"],"slicesMap":{}}