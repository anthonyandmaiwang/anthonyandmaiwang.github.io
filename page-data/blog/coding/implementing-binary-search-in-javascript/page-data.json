{"componentChunkName":"component---src-templates-page-js","path":"/blog/coding/implementing-binary-search-in-javascript/","result":{"data":{"page":{"name":"Implementing Binary Search in Javascript","menu":null,"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ll be going over a classic search function to find an item in a sorted list. First let’s look at the trivial method which is to check every item in the list until the expected item is found. This would run in "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(n)"}]},{"type":"text","value":" time since in the worst case we’ll need to scan every item."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\n\nfor (let i = 0; i < items.length; i++) {\n\n\n    if (items[i] === expectedItem) {\n\n\n        return i;\n\n\n    }\n\n\n}\n\n\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Binary search is a searching algorithm used to find the position of a specific value within a sorted array of data. It works by dividing the array in half repeatedly until the target value is found or the search is exhausted."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is a step-by-step explanation of how binary search works:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The algorithm starts by comparing the target value with the middle element of the array."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the target value is equal to the middle element, the algorithm returns the index of that element."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the target value is less than the middle element, the algorithm discards the upper half of the array and repeats the process on the lower half."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the target value is greater than the middle element, the algorithm discards the lower half of the array and repeats the process on the upper half."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The process continues until the target value is found, or the search is exhausted (i.e., there are no more elements to search)."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The time complexity of binary search is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(log n)"}]},{"type":"text","value":", which means that the algorithm takes logarithmic time to search an array of n elements. This makes it a very efficient algorithm for searching large arrays of data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the implementation in Javascript."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\n\nfunction binarySearch(arr, target) {\n\n\n    let low = 0, hi = arr.length - 1;\n\n\n    while (low <= hi) {\n\n\n        const midIdx = Math.floor((low + hi) / 2);\n\n\n        if (arr[midIdx] === target) {\n\n\n            return midIdx;\n\n\n        } else if (arr[midIdx] > target) {\n\n\n            hi = midIdx - 1;\n\n\n        } else {\n\n\n            low = midIdx + 1;\n\n\n        }\n\n\n    }\n\n\n    return -1;\n\n\n}\n\n\n"}]}]}],"data":{"quirksMode":false}}},"description":null,"affiliate":true,"modifiedTime":"2023-03-19T17:20:45.193Z","cover":null,"showTitle":true},"allGooglePhotosPhoto":{"nodes":[]}},"pageContext":{"index":false,"page":true,"name":"Implementing Binary Search in Javascript","slug":"/blog/coding/implementing-binary-search-in-javascript","id":"/blog/coding/implementing-binary-search-in-javascript","albumTitle":"Implementing Binary Search in Javascript"}},"staticQueryHashes":["2515861143"],"slicesMap":{}}