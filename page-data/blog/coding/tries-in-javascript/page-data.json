{"componentChunkName":"component---src-templates-page-js","path":"/blog/coding/tries-in-javascript/","result":{"data":{"page":{"name":"Tries in Javascript","menu":null,"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What are Tries?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tries, also known as Prefix Trees or Digital Trees, are a powerful data structure that are commonly used in computer science and programming. Tries are particularly useful for storing and searching strings or words, as they allow for fast and efficient search operations."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A Trie is a tree-like data structure where each node in the tree represents a letter of a word. Each node can have multiple children nodes, with each child node representing the next letter in the word. Tries are typically used to store sets of strings or words, and are particularly useful when we need to search for words that share a common prefix."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"How do Tries work?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When a new word is inserted into a Trie, the word is split into individual characters. Each character is then added as a node in the tree, with the first character being added as the root node. If the next character already has a corresponding node in the tree, the new node is added as a child of the existing node. If the next character does not have a corresponding node, a new node is created and added as a child of the previous node. This process continues until all characters in the word have been added to the Trie."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To search for a word in a Trie, we simply traverse the tree, one character at a time, following the corresponding child node for each character. If we reach a node that represents the last character of the word, we have found the word. If we reach a node that has no corresponding child node for the next character in the word, the word is not in the Trie."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What are the applications of Tries?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tries are used in a variety of applications, including:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Spell checkers: Tries are used in spell checkers to efficiently search for misspelled words."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Autocomplete: Tries are used in autocomplete algorithms to efficiently search for words that match a partial input string."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"IP routing: Tries are used in IP routing algorithms to efficiently route packets based on their IP addresses."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Text editors: Tries are used in text editors to quickly search for words in a document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Bioinformatics: Tries are used in bioinformatics to efficiently search for DNA sequences that match a given pattern."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Implementation Details"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\n\nvar Trie = function() {\n\n\n    this.data = {};\n\n\n    this.isLeaf = false;\n\n\n};\n\n\nTrie.prototype.insert = function(word) {\n\n\n    if (word.length === 0) {\n\n\n        this.isLeaf = true;\n\n\n        return;\n\n\n    }\n\n\n    const c = word.charAt(0),\n\n\n        rem = word.slice(1, word.length);\n\n\n    if (this.data[c] === undefined) {\n\n\n        this.data[c] = new Trie();\n\n\n    }\n\n\n    this.data[c].insert(rem);\n\n\n};\n\n\nTrie.prototype.search = function(word) {\n\n\n    if (word.length === 0) {\n\n\n        return this.isLeaf;\n\n\n    }\n\n\n    const c = word.charAt(0),\n\n\n        rem = word.slice(1, word.length);\n\n\n    if (this.data[c] === undefined) {\n\n\n        return false;\n\n\n    }\n\n\n    return this.data[c].search(rem);\n\n\n};\n\n\nTrie.prototype.startsWith = function(prefix) {\n\n\n    if (prefix.length === 0) {\n\n\n        return true;\n\n\n    }\n\n\n    const c = prefix.charAt(0),\n\n\n        rem = prefix.slice(1, prefix.length);\n\n\n    if (this.data[c] === undefined) {\n\n\n        return false;\n\n\n    }\n\n\n    return this.data[c].startsWith(rem);\n\n\n};\n\n\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"In Conclusion"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In conclusion, Tries are a powerful data structure that are particularly useful for storing and searching sets of strings or words. They allow for fast and efficient search operations and are used in a variety of applications in computer science and programming."}]}],"data":{"quirksMode":false}}},"description":null,"affiliate":true,"modifiedTime":"2023-03-20T22:03:18.450Z","cover":null,"showTitle":true},"allGooglePhotosPhoto":{"nodes":[]}},"pageContext":{"index":false,"page":true,"name":"Tries in Javascript","slug":"/blog/coding/tries-in-javascript","id":"/blog/coding/tries-in-javascript","albumTitle":"Tries in Javascript"}},"staticQueryHashes":["2515861143"],"slicesMap":{}}