{"version":3,"file":"650-1b720fef9daa83a28a3c.js","mappings":"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","sources":["webpack://wedding/./src/hooks/useDisclosure.js","webpack://wedding/./src/layout/components/Drawer/index.js","webpack://wedding/./src/layout/components/IconButton/index.js","webpack://wedding/./src/layout/htmlAstScraper/index.js","webpack://wedding/./src/layout/menu/components/basicNavbar.js"],"sourcesContent":["\nimport {useState} from \"react\";\n\nexport const useDisclosure = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const onOpen = () => {\n        setIsOpen(true);\n    };\n\n    const onClose = () => {\n        setIsOpen(false);\n    };\n\n    return {\n        isOpen,\n        onOpen,\n        onClose,\n    };\n};","import React from \"react\";\n\nimport IconButton from \"../IconButton\";\n\nimport \"./styles.scss\";\n\nconst DrawerOverlay = () => {\n    return (\n        <div className=\"DrawerOverlay\" />\n    );\n}\n\nconst DrawerContent = (props) => {\n    return (\n        <div className=\"DrawerContent\">\n            <div className=\"CloseButtonContainer\">\n                <IconButton onClick={props.onClose} >\n                    X\n                </IconButton>\n            </div>\n            {props.children}\n        </div>\n    );\n}\n\nexport const Drawer = (props) => {\n    const {isOpen, onClose} = props;\n\n    React.useEffect(() => {\n        if (isOpen) {\n            document.querySelector('body').classList.add('PreventScroll');\n        }\n\n        return () => {\n            document.querySelector('body').classList.remove('PreventScroll');\n        };\n    }, [isOpen]);\n\n    if (!isOpen) {\n        return null;\n    }\n\n    return (\n        <div className=\"Drawer\">\n            <DrawerOverlay />\n            <DrawerContent onClose={onClose}>\n                {props.children}\n            </DrawerContent>\n        </div>\n    );\n};\n\nexport default Drawer;","import React from \"react\";\n\nimport \"./styles.scss\";\n\nconst IconButton = (props) => {\n    const { ariaLabel, className = '', onClick } = props;\n\n    return (\n        <button className={`${className} IconButton`.trim()} onClick={onClick} aria-label={ariaLabel}>\n            {props.children}\n        </button>\n    );\n};\n\nexport default IconButton;","const getNodes = (props, typeToScrape) => {\n    if (typeof props !== 'object') {\n        return [];\n    }\n\n    let nodes = [];\n\n    if (props.children) {\n        props.children.forEach((child) => {\n            if (typeof child === 'object') {\n                const type = typeof child.type === \"function\" ? child.type().type : child.type;\n\n                if (typeToScrape.has(type) || typeToScrape.has(child.tagName)) {\n                    nodes = [...nodes, child];\n                } else {\n                    const res = getNodes(child, typeToScrape);\n                    nodes = [...nodes, ...res];\n                }\n            }\n        });\n    }\n\n    return nodes;\n}\n\nconst scraper = (props, typeToScrape) => {\n    return getNodes(props, typeToScrape).map(img => {\n        const newProps = {...img.props};\n        delete newProps.style;\n        return {\n            ...img,\n            props: newProps\n          };\n    });\n};\n\nexport default scraper;","import React from \"react\";\nimport htmlAstScraper from \"../../htmlAstScraper\";\nimport { Link as GatsbyLink } from \"gatsby\";\n\nimport Drawer from \"../../components/Drawer\";\nimport IconButton from \"../../components/IconButton\";\n\nimport { useDisclosure } from \"../../../hooks/useDisclosure\";\n\nimport \"./styles.scss\";\n\nconst DesktopNavBar = ({ links }) => {\n    return (\n        <div className=\"DesktopNavigation\">\n            <nav className=\"NavBar\">\n                <ul>\n                    {links.map((l, idx) => {\n                        return (\n                            <li key={idx}>\n                                <GatsbyLink\n                                    color='black.500'\n                                    activeStyle={l.isActive ? { color: \"#ffb6be\", fontWeight: 'bold' } : {}}\n                                    to={l.href}>\n                                    {l.text}\n                                </GatsbyLink>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </nav>\n        </div>\n    );\n};\n\nconst MobileNavBar = ({ links, hamburgerIconColor }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n    return (\n        <nav className=\"MobileNavBar\">\n            <IconButton\n                colorScheme='white'\n                onClick={onOpen}\n                ariaLabel='Open Navigation'>\n                    =\n            </IconButton>\n\n            <Drawer\n                isOpen={isOpen}\n                onClose={onClose}\n            >\n                <ul className=\"MobileNavBar\">\n                    {links.map((l, idx) => {\n                        return (\n                            <li key={idx}>\n                                <GatsbyLink\n                                    color='black.500'\n                                    activeStyle={l.isActive ? { color: \"#ffb6be\", fontWeight: 'bold' } : {}}\n                                    onClick={() => {\n                                        onClose();\n                                    }}\n                                    to={l.href}>\n                                    {l.text}\n                                </GatsbyLink>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Drawer>\n        </nav>\n    );\n};\n\nexport const NavBar = ({ curRoute, hamburgerIconColor = 'black.400', htmlAst }) => {\n    const set = new Set(['a']);\n    const links = htmlAstScraper(htmlAst, set).filter(l => {\n        return l.children.length > 0 && l.children[0].value;\n    }).map(l => {\n        const href = l.properties.href,\n            normalizedHref = href.charAt(href.length - 1) === '/' ? href.slice(0, href.length - 1) : href,\n            normalizedHrefCurRoute = curRoute.charAt(curRoute.length - 1) === '/' ? curRoute.slice(0, curRoute.length - 1) : curRoute;\n        return {\n            isActive: normalizedHref === normalizedHrefCurRoute,\n            text: l.children[0].value,\n            href: l.properties.href,\n        };\n    });\n\n\n    return (\n        <>\n            <MobileNavBar links={links} hamburgerIconColor={hamburgerIconColor} />\n            <DesktopNavBar links={links} />\n        </>\n    );\n\n};\n\nexport default NavBar;"],"names":["useDisclosure","isOpen","setIsOpen","useState","onOpen","onClose","DrawerOverlay","className","DrawerContent","props","onClick","children","React","document","querySelector","classList","add","remove","ariaLabel","trim","getNodes","typeToScrape","nodes","forEach","child","type","has","tagName","res","map","img","newProps","style","DesktopNavBar","links","l","idx","key","color","activeStyle","isActive","fontWeight","to","href","text","MobileNavBar","hamburgerIconColor","colorScheme","NavBar","curRoute","htmlAst","set","Set","htmlAstScraper","filter","length","value","properties","charAt","slice"],"sourceRoot":""}