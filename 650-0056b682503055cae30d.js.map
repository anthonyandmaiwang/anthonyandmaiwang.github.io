{"version":3,"file":"650-0056b682503055cae30d.js","mappings":"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","sources":["webpack://wedding/./src/hooks/useDisclosure.js","webpack://wedding/./src/icons/hamburger/index.js","webpack://wedding/./src/icons/close/index.js","webpack://wedding/./src/layout/components/Drawer/index.js","webpack://wedding/./src/layout/components/IconButton/index.js","webpack://wedding/./src/layout/htmlAstScraper/index.js","webpack://wedding/./src/layout/menu/components/basicNavbar.js"],"sourcesContent":["\nimport {useState} from \"react\";\n\nexport const STATE = {\n    'OPENING': 'OPENING',\n    'OPEN': 'OPEN',\n    'CLOSING': 'CLOSING',\n    'CLOSED': 'CLOSED',\n};\n\nexport const useDisclosureWithAnimation = (animateTime = 250) => {\n    const [state, setState] = useState(STATE.CLOSED);\n\n    const onOpen = () => {\n        if (state === STATE.CLOSED) {\n            setState(STATE.OPENING);\n            setTimeout(() => {\n                setState(STATE.OPEN);\n            }, animateTime);\n        }\n    };\n\n    const onClose = () => {\n        if (state === STATE.OPEN) {\n            setState(STATE.CLOSING);\n            setTimeout(() => {\n                setState(STATE.CLOSED);\n            }, animateTime);\n        }\n    };\n\n    return {\n        state,\n        onOpen,\n        onClose,\n    };\n}\n\nexport const useDisclosure = () => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const onOpen = () => {\n        setIsOpen(true);\n    };\n\n    const onClose = () => {\n        setIsOpen(false);\n    };\n\n    return {\n        isOpen,\n        onOpen,\n        onClose,\n    };\n};","import * as React from \"react\";\n\nimport \"./styles.scss\";\n\nconst Hamburger = (props) => {\n    const cn = `HamburgerLine ${props.iconColor}`.trim();\n\n    return (\n        <div className=\"HamburgerMenu\">\n            <div className={cn} />\n            <div className={cn} />\n            <div className={cn} />\n        </div>\n    );\n}\n\nexport default Hamburger","import * as React from \"react\";\n\nimport \"./styles.scss\";\n\nconst CloseIcon = (props) => {\n    return (\n        <div className=\"CloseIcon\" />\n    );\n}\n\nexport default CloseIcon;","import React from \"react\";\n\nimport IconButton from \"../IconButton\";\nimport CloseIcon from \"../../../icons/close\";\nimport { STATE } from \"../../../hooks/useDisclosure\";\n\nimport \"./styles.scss\";\n\nconst DrawerOverlay = () => {\n    return (\n        <div className=\"DrawerOverlay\" />\n    );\n}\n\nconst DrawerContent = (props) => {\n    const {state} = props;\n    const drawerContent = React.useRef(null);\n\n    const width = drawerContent?.current?.offsetWidth || 380;\n    const marginStyle = {\n        marginLeft: state === STATE.CLOSED || state === STATE.CLOSING ? `-${width}px` : `0` \n    };\n    return (\n        <div ref={drawerContent} className=\"DrawerContent\" style={marginStyle}>\n            <div className=\"CloseButtonContainer\">\n                <IconButton onClick={props.onClose} >\n                    <CloseIcon />\n                </IconButton>\n            </div>\n            {props.children}\n        </div>\n    );\n}\n\nexport const Drawer = (props) => {\n    const {state, onClose} = props;\n\n    React.useEffect(() => {\n        if (state !== STATE.CLOSED) {\n            document.querySelector('body').classList.add('PreventScroll');\n        }\n\n        return () => {\n            document.querySelector('body').classList.remove('PreventScroll');\n        };\n    }, [state]);\n\n    const style = { visibility: state === STATE.CLOSED ? 'hidden' : 'visible' };\n\n    return (\n        <div className=\"Drawer\" style={style}>\n            <DrawerOverlay />\n            <DrawerContent onClose={onClose} state={state}>\n                {props.children}\n            </DrawerContent>\n        </div>\n    );\n};\n\nexport default Drawer;","import React from \"react\";\n\nimport \"./styles.scss\";\n\nconst IconButton = (props) => {\n    const { ariaLabel, className = '', onClick } = props;\n\n    return (\n        <button className={`${className} IconButton`.trim()} onClick={onClick} aria-label={ariaLabel}>\n            {props.children}\n        </button>\n    );\n};\n\nexport default IconButton;","const getNodes = (props, typeToScrape) => {\n    if (typeof props !== 'object') {\n        return [];\n    }\n\n    let nodes = [];\n\n    if (props.children) {\n        props.children.forEach((child) => {\n            if (typeof child === 'object') {\n                const type = typeof child.type === \"function\" ? child.type().type : child.type;\n\n                if (typeToScrape.has(type) || typeToScrape.has(child.tagName)) {\n                    nodes = [...nodes, child];\n                } else {\n                    const res = getNodes(child, typeToScrape);\n                    nodes = [...nodes, ...res];\n                }\n            }\n        });\n    }\n\n    return nodes;\n}\n\nconst scraper = (props, typeToScrape) => {\n    return getNodes(props, typeToScrape).map(img => {\n        const newProps = {...img.props};\n        delete newProps.style;\n        return {\n            ...img,\n            props: newProps\n          };\n    });\n};\n\nexport default scraper;","import React from \"react\";\nimport htmlAstScraper from \"../../htmlAstScraper\";\nimport { Link as GatsbyLink } from \"gatsby\";\n\nimport Drawer from \"../../components/Drawer\";\nimport IconButton from \"../../components/IconButton\";\nimport Hamburger from \"../../../icons/hamburger\";\n\nimport { useDisclosure, useDisclosureWithAnimation } from \"../../../hooks/useDisclosure\";\n\nimport \"./styles.scss\";\n\nconst DesktopNavBar = ({ links }) => {\n    return (\n        <div className=\"DesktopNavigation\">\n            <nav className=\"NavBar\">\n                <ul>\n                    {links.map((l, idx) => {\n                        return (\n                            <li key={idx}>\n                                <GatsbyLink\n                                    color='black.500'\n                                    activeStyle={l.isActive ? { color: \"#ffb6be\", fontWeight: 'bold' } : {}}\n                                    to={l.href}>\n                                    {l.text}\n                                </GatsbyLink>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </nav>\n        </div>\n    );\n};\n\nconst MobileNavBar = ({ links, hamburgerIconColor }) => {\n    // const { isOpen, onOpen, onClose } = useDisclosure();\n    const {\n        state,\n        onOpen,\n        onClose,\n    } = useDisclosureWithAnimation();\n\n    return (\n        <nav className=\"MobileNavBar\">\n            <IconButton\n                colorScheme='white'\n                onClick={onOpen}\n                ariaLabel='Open Navigation'>\n                <Hamburger iconColor={hamburgerIconColor} />\n            </IconButton>\n\n            <Drawer\n                state={state}\n                onClose={onClose}\n            >\n                <ul className=\"MobileNavBar\">\n                    {links.map((l, idx) => {\n                        return (\n                            <li key={idx}>\n                                <GatsbyLink\n                                    color='black.500'\n                                    activeStyle={l.isActive ? { color: \"#ffb6be\", fontWeight: 'bold' } : {}}\n                                    onClick={() => {\n                                        onClose();\n                                    }}\n                                    to={l.href}>\n                                    {l.text}\n                                </GatsbyLink>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Drawer>\n        </nav>\n    );\n};\n\nexport const NavBar = ({ curRoute, hamburgerIconColor = 'black', htmlAst }) => {\n    const set = new Set(['a']);\n    const links = htmlAstScraper(htmlAst, set).filter(l => {\n        return l.children.length > 0 && l.children[0].value;\n    }).map(l => {\n        const href = l.properties.href,\n            normalizedHref = href.charAt(href.length - 1) === '/' ? href.slice(0, href.length - 1) : href,\n            normalizedHrefCurRoute = curRoute.charAt(curRoute.length - 1) === '/' ? curRoute.slice(0, curRoute.length - 1) : curRoute;\n        return {\n            isActive: normalizedHref === normalizedHrefCurRoute,\n            text: l.children[0].value,\n            href: l.properties.href,\n        };\n    });\n\n\n    return (\n        <>\n            <MobileNavBar links={links} hamburgerIconColor={hamburgerIconColor} />\n            <DesktopNavBar links={links} />\n        </>\n    );\n\n};\n\nexport default NavBar;"],"names":["STATE","useDisclosureWithAnimation","animateTime","state","setState","useState","CLOSED","onOpen","OPENING","setTimeout","OPEN","onClose","CLOSING","useDisclosure","isOpen","setIsOpen","props","cn","iconColor","trim","className","DrawerOverlay","DrawerContent","drawerContent","React","width","current","offsetWidth","marginStyle","marginLeft","ref","style","IconButton","onClick","children","document","querySelector","classList","add","remove","visibility","ariaLabel","getNodes","typeToScrape","nodes","forEach","child","type","has","tagName","res","map","img","newProps","DesktopNavBar","links","l","idx","key","color","activeStyle","isActive","fontWeight","to","href","text","MobileNavBar","hamburgerIconColor","colorScheme","NavBar","curRoute","htmlAst","set","Set","htmlAstScraper","filter","length","value","properties","charAt","slice"],"sourceRoot":""}