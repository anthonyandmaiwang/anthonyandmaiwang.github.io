{"version":3,"file":"650-6848a134733068042295.js","mappings":"4NAYA,MAAMA,EAAgBC,IAAgB,IAAf,MAAEC,GAAOD,EAC5B,OACIE,EAAAA,cAAA,OAAKC,UAAU,qBACXD,EAAAA,cAAA,OAAKC,UAAU,UACXD,EAAAA,cAAA,UACKD,EAAMG,KAAI,CAACC,EAAGC,IAEPJ,EAAAA,cAAA,MAAIK,IAAKD,GACLJ,EAAAA,cAACM,EAAAA,KAAU,CACPC,MAAM,YACNC,YAAaL,EAAEM,SAAW,CAAEF,MAAO,UAAWG,WAAY,QAAW,CAAC,EACtEC,GAAIR,EAAES,MACLT,EAAEU,WAOzB,EAIRC,EAAeC,IAAoC,IAAnC,MAAEhB,EAAK,mBAAEiB,GAAoBD,EAC/C,MAAM,MACFE,EAAK,OACLC,EAAM,QACNC,IACAC,EAAAA,EAAAA,MAEJ,OACIpB,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAACqB,EAAAA,EAAU,CACPC,YAAY,QACZC,QAASL,EACTM,UAAU,mBACVxB,EAAAA,cAACyB,EAAAA,EAAS,CAACC,UAAWV,KAG1BhB,EAAAA,cAAC2B,EAAAA,EAAM,CACHV,MAAOA,EACPE,QAASA,GAETnB,EAAAA,cAAA,MAAIC,UAAU,gBACTF,EAAMG,KAAI,CAACC,EAAGC,IAEPJ,EAAAA,cAAA,MAAIK,IAAKD,GACLJ,EAAAA,cAACM,EAAAA,KAAU,CACPC,MAAM,YACNC,YAAaL,EAAEM,SAAW,CAAEF,MAAO,UAAWG,WAAY,QAAW,CAAC,EACtEa,QAASA,KACLJ,GAAS,EAEbR,GAAIR,EAAES,MACLT,EAAEU,WAOzB,EAIDe,EAASC,IAA0D,IAAzD,SAAEC,EAAQ,mBAAEd,EAAqB,QAAO,QAAEe,GAASF,EACtE,MAAMG,EAAM,IAAIC,IAAI,CAAC,MACflC,GAAQmC,EAAAA,EAAAA,GAAeH,EAASC,GAAKG,QAAOhC,GACvCA,EAAEiC,SAASC,OAAS,GAAKlC,EAAEiC,SAAS,GAAGE,QAC/CpC,KAAIC,IACH,MAAMS,EAAOT,EAAEoC,WAAW3B,KACtB4B,EAAkD,MAAjC5B,EAAK6B,OAAO7B,EAAKyB,OAAS,GAAazB,EAAK8B,MAAM,EAAG9B,EAAKyB,OAAS,GAAKzB,EACzF+B,EAAkE,MAAzCb,EAASW,OAAOX,EAASO,OAAS,GAAaP,EAASY,MAAM,EAAGZ,EAASO,OAAS,GAAKP,EAE/Gc,EAA4B,UAAnBJ,EAEf,MAAO,CACH/B,SAFa+B,IAAmBG,GAAsD,KAA3BA,GAAoD,UAAnBH,EAG5F3B,KAAMV,EAAEiC,SAAS,GAAGE,MACpB1B,KAAMgC,EAAS,IAAMzC,EAAEoC,WAAW3B,KACrC,IAIL,OACIZ,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAACc,EAAY,CAACf,MAAOA,EAAOiB,mBAAoBA,IAChDhB,EAAAA,cAACH,EAAa,CAACE,MAAOA,IACvB,EAKX,W","sources":["webpack://wedding/./src/layout/menu/components/basicNavbar.js"],"sourcesContent":["import React from \"react\";\nimport htmlAstScraper from \"../../htmlAstScraper\";\nimport { Link as GatsbyLink } from \"gatsby\";\n\nimport Drawer from \"../../components/Drawer\";\nimport IconButton from \"../../components/IconButton\";\nimport Hamburger from \"../../../icons/hamburger\";\n\nimport { useDisclosureWithAnimation } from \"../../../hooks/useDisclosure\";\n\nimport \"./styles.scss\";\n\nconst DesktopNavBar = ({ links }) => {\n    return (\n        <div className=\"DesktopNavigation\">\n            <nav className=\"NavBar\">\n                <ul>\n                    {links.map((l, idx) => {\n                        return (\n                            <li key={idx}>\n                                <GatsbyLink\n                                    color='black.500'\n                                    activeStyle={l.isActive ? { color: \"#ffb6be\", fontWeight: 'bold' } : {}}\n                                    to={l.href}>\n                                    {l.text}\n                                </GatsbyLink>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </nav>\n        </div>\n    );\n};\n\nconst MobileNavBar = ({ links, hamburgerIconColor }) => {\n    const {\n        state,\n        onOpen,\n        onClose,\n    } = useDisclosureWithAnimation();\n\n    return (\n        <nav className=\"MobileNavBar\">\n            <IconButton\n                colorScheme='white'\n                onClick={onOpen}\n                ariaLabel='Open Navigation'>\n                <Hamburger iconColor={hamburgerIconColor} />\n            </IconButton>\n\n            <Drawer\n                state={state}\n                onClose={onClose}\n            >\n                <ul className=\"MobileNavBar\">\n                    {links.map((l, idx) => {\n                        return (\n                            <li key={idx}>\n                                <GatsbyLink\n                                    color='black.500'\n                                    activeStyle={l.isActive ? { color: \"#ffb6be\", fontWeight: 'bold' } : {}}\n                                    onClick={() => {\n                                        onClose();\n                                    }}\n                                    to={l.href}>\n                                    {l.text}\n                                </GatsbyLink>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Drawer>\n        </nav>\n    );\n};\n\nexport const NavBar = ({ curRoute, hamburgerIconColor = 'black', htmlAst }) => {\n    const set = new Set(['a']);\n    const links = htmlAstScraper(htmlAst, set).filter(l => {\n        return l.children.length > 0 && l.children[0].value;\n    }).map(l => {\n        const href = l.properties.href,\n            normalizedHref = href.charAt(href.length - 1) === '/' ? href.slice(0, href.length - 1) : href,\n            normalizedHrefCurRoute = curRoute.charAt(curRoute.length - 1) === '/' ? curRoute.slice(0, curRoute.length - 1) : curRoute;\n\n        const isHome = normalizedHref === \"/home\";\n        const isActive = normalizedHref === normalizedHrefCurRoute || (normalizedHrefCurRoute === '' && normalizedHref === '/home');\n        return {\n            isActive: isActive,\n            text: l.children[0].value,\n            href: isHome ? \"/\" : l.properties.href,\n        };\n    });\n\n\n    return (\n        <>\n            <MobileNavBar links={links} hamburgerIconColor={hamburgerIconColor} />\n            <DesktopNavBar links={links} />\n        </>\n    );\n\n};\n\nexport default NavBar;"],"names":["DesktopNavBar","_ref","links","React","className","map","l","idx","key","GatsbyLink","color","activeStyle","isActive","fontWeight","to","href","text","MobileNavBar","_ref2","hamburgerIconColor","state","onOpen","onClose","useDisclosureWithAnimation","IconButton","colorScheme","onClick","ariaLabel","Hamburger","iconColor","Drawer","NavBar","_ref3","curRoute","htmlAst","set","Set","htmlAstScraper","filter","children","length","value","properties","normalizedHref","charAt","slice","normalizedHrefCurRoute","isHome"],"sourceRoot":""}